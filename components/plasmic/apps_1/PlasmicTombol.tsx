// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4cbszj7bHtGkLbXg7TtkqR
// Component: 7p6FG5r5Tg
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: eUvXm90dc_P/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_apps_1.module.css"; // plasmic-import: 4cbszj7bHtGkLbXg7TtkqR/projectcss
import sty from "./PlasmicTombol.module.css"; // plasmic-import: 7p6FG5r5Tg/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: PJgOVCy0Gx-/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 15cRC17g1DQ/icon

export type PlasmicTombol__VariantMembers = {
  unnamedGroupOfVariants: "unnamedVariant";
  bersama: "bersama";
};

export type PlasmicTombol__VariantsArgs = {
  unnamedGroupOfVariants?: SingleChoiceArg<"unnamedVariant">;
  bersama?: SingleBooleanChoiceArg<"bersama">;
};

type VariantPropType = keyof PlasmicTombol__VariantsArgs;
export const PlasmicTombol__VariantProps = new Array<VariantPropType>(
  "unnamedGroupOfVariants",
  "bersama"
);

export type PlasmicTombol__ArgsType = {};
type ArgPropType = keyof PlasmicTombol__ArgsType;
export const PlasmicTombol__ArgProps = new Array<ArgPropType>();

export type PlasmicTombol__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  svg?: p.Flex<"svg">;
  ul?: p.Flex<"ul">;
  li?: p.Flex<"li">;
};

export interface DefaultTombolProps {
  unnamedGroupOfVariants?: SingleChoiceArg<"unnamedVariant">;
  bersama?: SingleBooleanChoiceArg<"bersama">;
  className?: string;
}

function PlasmicTombol__RenderFunc(props: {
  variants: PlasmicTombol__VariantsArgs;
  args: PlasmicTombol__ArgsType;
  overrides: PlasmicTombol__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bOyeh
          )}
        >
          {"some Text"}
        </div>
      ) : null}

      {(
        hasVariant(variants, "unnamedGroupOfVariants", "unnamedVariant")
          ? true
          : true
      ) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cgBoU,
            {
              [sty.textunnamedGroupOfVariants_unnamedVariant__cgBoUqPhaJ]:
                hasVariant(variants, "unnamedGroupOfVariants", "unnamedVariant")
            }
          )}
        >
          <React.Fragment>
            <React.Fragment>{""}</React.Fragment>
            {
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Kotak"}
              </h1>
            }
            <React.Fragment>{""}</React.Fragment>
          </React.Fragment>
        </div>
      ) : null}

      {(
        hasVariant(variants, "unnamedGroupOfVariants", "unnamedVariant")
          ? true
          : true
      ) ? (
        <Button
          className={classNames("__wab_instance", sty.button___4Wrt, {
            [sty.buttonunnamedGroupOfVariants_unnamedVariant___4WrTqPhaJ]:
              hasVariant(variants, "unnamedGroupOfVariants", "unnamedVariant")
          })}
        >
          {"Send"}
        </Button>
      ) : null}

      {(
        hasVariant(variants, "unnamedGroupOfVariants", "unnamedVariant")
          ? true
          : true
      ) ? (
        <Button
          className={classNames("__wab_instance", sty.button__amixa, {
            [sty.buttonunnamedGroupOfVariants_unnamedVariant__amixaqPhaJ]:
              hasVariant(variants, "unnamedGroupOfVariants", "unnamedVariant")
          })}
          color={"green" as const}
          shape={"rounded" as const}
          showStartIcon={true}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fMtB
            )}
          >
            {"Button"}
          </div>
        </Button>
      ) : null}

      {(
        hasVariant(variants, "unnamedGroupOfVariants", "unnamedVariant")
          ? true
          : true
      ) ? (
        <svg
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgunnamedGroupOfVariants_unnamedVariant]: hasVariant(
              variants,
              "unnamedGroupOfVariants",
              "unnamedVariant"
            )
          })}
          role={"img"}
        />
      ) : null}

      {(hasVariant(variants, "bersama", "bersama") ? true : true) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lDKxX,
            {
              [sty.textbersama__lDKxX1Avio]: hasVariant(
                variants,
                "bersama",
                "bersama"
              )
            }
          )}
        >
          <React.Fragment>
            <React.Fragment>{""}</React.Fragment>
            {
              <ul
                data-plasmic-name={"ul"}
                data-plasmic-override={overrides.ul}
                className={classNames(projectcss.all, projectcss.ul, sty.ul)}
              >
                <li
                  data-plasmic-name={"li"}
                  data-plasmic-override={overrides.li}
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li
                  )}
                >
                  {"bersama"}
                </li>
              </ul>
            }
            <React.Fragment>{""}</React.Fragment>
          </React.Fragment>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "svg", "ul", "li"],
  h1: ["h1"],
  svg: ["svg"],
  ul: ["ul", "li"],
  li: ["li"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  svg: "svg";
  ul: "ul";
  li: "li";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTombol__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTombol__VariantsArgs;
    args?: PlasmicTombol__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTombol__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTombol__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTombol__ArgProps,
          internalVariantPropNames: PlasmicTombol__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTombol__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTombol";
  } else {
    func.displayName = `PlasmicTombol.${nodeName}`;
  }
  return func;
}

export const PlasmicTombol = Object.assign(
  // Top-level PlasmicTombol renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    svg: makeNodeComponent("svg"),
    ul: makeNodeComponent("ul"),
    li: makeNodeComponent("li"),

    // Metadata about props expected for PlasmicTombol
    internalVariantProps: PlasmicTombol__VariantProps,
    internalArgProps: PlasmicTombol__ArgProps
  }
);

export default PlasmicTombol;
/* prettier-ignore-end */
